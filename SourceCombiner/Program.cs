using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace SourceCombiner
{
    public sealed class SourceCombiner
    {
        private static readonly List<string> SourceFilesToIgnore = new List<string>
        {
            "AssemblyInfo.cs"
        };

        static void Main(string[] args)
        {
            if (args == null || args.Length < 2)
            {
                Console.WriteLine("You must provide at least 2 arguments. The first is the solution file path and the second is the output file path.");
                return;
            }

            string projectFilePath = args[0];
            string outputFilePath = args[1];

            bool openFile = false;
            if (args.Length > 2)
            {
                Boolean.TryParse(args[2], out openFile);
            }

            var filesToParse = GetSourceFileNames(projectFilePath);
            var namespaces = GetUniqueNamespaces(filesToParse);

            string outputSource = GenerateCombinedSource(namespaces, filesToParse);
            File.WriteAllText(outputFilePath, outputSource);

            if (openFile)
            {
                Process.Start(outputFilePath);
            }

            Console.WriteLine("Finished!");
        }

        private static string GenerateCombinedSource(List<string> namespaces, List<string> files)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"/*");
            sb.AppendLine($" * File generated by SourceCombiner.exe using {files.Count} source files.");
            sb.AppendLine($" * Created On: {DateTime.Now}");
            sb.AppendLine(@"*/");

            foreach (var ns in namespaces.OrderBy(s => s))
            {
                sb.AppendLine("using " + ns + ";");
            }

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);
                sb.AppendLine(@"//*** SourceCombiner -> original file " + Path.GetFileName(file) + " ***");
                var openingTag = "using ";
                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    var isUsingDir = trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";");
                    if (!string.IsNullOrWhiteSpace(sourceLine) && !isUsingDir)
                    {
                        sb.AppendLine(sourceLine);
                    }
                }
            }

            return sb.ToString();
        }

        private static List<string> GetSourceFileNames(string solutionFilePath)
        {
            var directories = Directory.GetDirectories(solutionFilePath, "*", SearchOption.TopDirectoryOnly).ToList();
            directories.RemoveAt(directories.FindIndex(p => p.Contains("bin")));
            directories.RemoveAt(directories.FindIndex(p => p.Contains("obj")));

            var files = Directory.GetFiles(solutionFilePath, "*.cs", SearchOption.TopDirectoryOnly).ToList();

            foreach (var directory in directories)
            {
                files.AddRange(Directory.GetFiles(Path.Combine(solutionFilePath, directory), "*.cs", SearchOption.AllDirectories));
            }

            return files;
        }

        private static List<string> GetUniqueNamespaces(List<string> files)
        {
            var names = new List<string>();
            const string openingTag = "using ";
            const int namespaceStartIndex = 6;

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);

                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    if (trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";"))
                    {
                        var name = trimmedLine.Substring(namespaceStartIndex, trimmedLine.Length - namespaceStartIndex - 1);

                        if (!names.Contains(name))
                        {
                            names.Add(name);
                        }
                    }
                }
            }

            return names;
        }
    }
}